import React, { useState, useEffect } from "react";
import { ShieldOff, AlertTriangle, Calendar, Search, ArrowUpRight, Clock, X } from "lucide-react";
import LoadingSpinner from "../../Components/Common/LoadingSpinner";
import EmptyState from "../../Components/Common/EmptyState";
import securityService from "../../services/securityService";

const VulnerabilityMetrics = () => {
  const [vulnerabilityData, setVulnerabilityData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [timeRange, setTimeRange] = useState("30days");
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);

  useEffect(() => {
    const fetchVulnerabilityData = async () => {
      setLoading(true);
      try {
        // In a real application, this would fetch actual vulnerability data
        const data = await securityService.getVulnerabilityData(timeRange);
        setVulnerabilityData(data);
      } catch (err) {
        console.error("Error fetching vulnerability data:", err);
        setError("Failed to load vulnerability information. Please try again.");
      } finally {
        setLoading(false);
      }
    };

    fetchVulnerabilityData();
  }, [timeRange]);

  const getSeverityColor = (severity) => {
    switch (severity.toLowerCase()) {
      case "critical":
        return "text-red-600";
      case "high":
        return "text-orange-600";
      case "medium":
        return "text-amber-600";
      case "low":
        return "text-blue-600";
      default:
        return "text-gray-600";
    }
  };

  const getSeverityBgColor = (severity) => {
    switch (severity.toLowerCase()) {
      case "critical":
        return "bg-red-100";
      case "high":
        return "bg-orange-100";
      case "medium":
        return "bg-amber-100";
      case "low":
        return "bg-blue-100";
      default:
        return "bg-gray-100";
    }
  };

  const getStatusBadge = (status) => {
    switch (status.toLowerCase()) {
      case "open":
        return "bg-red-100 text-red-800";
      case "in progress":
        return "bg-amber-100 text-amber-800";
      case "resolved":
        return "bg-green-100 text-green-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const filteredVulnerabilities = vulnerabilityData?.vulnerabilities.filter(vuln => 
    vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    vuln.affected.toLowerCase().includes(searchTerm.toLowerCase()) ||
    vuln.description.toLowerCase().includes(searchTerm.toLowerCase())
  ) || [];

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <LoadingSpinner size="large" text="Loading vulnerability data..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
        <div className="flex">
          <div className="flex-shrink-0">
            <AlertTriangle className="h-5 w-5 text-red-400" />
          </div>
          <div className="ml-3">
            <p className="text-sm text-red-700">{error}</p>
          </div>
        </div>
      </div>
    );
  }

  // Use mock data if no real data is provided
  const data = vulnerabilityData || {
    summary: {
      total: 16,
      critical: 1,
      high: 2,
      medium: 5,
      low: 8,
      open: 10,
      inProgress: 4,
      resolved: 2,
    },
    lastScan: "2025-05-12T15:30:00Z",
    vulnerabilities: [
      {
        id: "vuln-001",
        title: "Critical SQL Injection Vulnerability",
        severity: "critical",
        cvss: 9.8,
        status: "open",
        discovered: "2025-05-10T08:15:00Z",
        affected: "API Server",
        description: "A SQL injection vulnerability was discovered in the user authentication endpoint that could allow an attacker to bypass authentication and access sensitive data.",
        remediation: "Update the ORM layer to use parameterized queries and implement input validation on all user-supplied data.",
        references: ["CVE-2025-1234", "OWASP Top 10: A1 - Injection"],
      },
      {
        id: "vuln-002",
        title: "Insecure Direct Object Reference",
        severity: "high",
        cvss: 8.4,
        status: "open",
        discovered: "2025-05-08T14:30:00Z",
        affected: "User Profile Module",
        description: "An IDOR vulnerability allows unauthorized users to access profile data of other users by manipulating resource IDs in requests.",
        remediation: "Implement proper authorization checks for all user data access and use indirect reference maps.",
        references: ["OWASP Top 10: A01:2021 – Broken Access Control"],
      },
      {
        id: "vuln-003",
        title: "Cross-Site Scripting (XSS)",
        severity: "high",
        cvss: 7.5,
        status: "in progress",
        discovered: "2025-05-05T11:45:00Z",
        affected: "Comments Feature",
        description: "A stored XSS vulnerability exists in the comments section allowing attackers to inject malicious scripts that execute when other users view comments.",
        remediation: "Implement proper output encoding and Content Security Policy (CSP) headers.",
        references: ["OWASP Top 10: A07:2021 - Cross-Site Scripting"],
      },
      {
        id: "vuln-004",
        title: "Outdated Cryptographic Standards",
        severity: "medium",
        cvss: 5.3,
        status: "open",
        discovered: "2025-05-01T09:20:00Z",
        affected: "Authentication System",
        description: "The system uses outdated cryptographic algorithms (MD5) for password storage, which are considered insecure by modern standards.",
        remediation: "Update password hashing to use bcrypt or Argon2 with proper salting.",
        references: ["OWASP Top 10: A02:2021 – Cryptographic Failures"],
      },
      {
        id: "vuln-005",
        title: "Insecure Dependency",
        severity: "medium",
        cvss: 6.1,
        status: "open",
        discovered: "2025-04-28T16:10:00Z",
        affected: "Frontend Framework",
        description: "One of the frontend dependencies has a known security vulnerability that could lead to data exposure.",
        remediation: "Update the dependency to the latest version or find an alternative solution.",
        references: ["CVE-2025-5678", "OWASP Top 10: A06:2021 – Vulnerable and Outdated Components"],
      },
    ],
    trendData: [
      { date: "2025-04-15", critical: 2, high: 3, medium: 6, low: 10 },
      { date: "2025-04-22", critical: 2, high: 3, medium: 7, low: 9 },
      { date: "2025-04-29", critical: 1, high: 4, medium: 6, low: 8 },
      { date: "2025-05-06", critical: 1, high: 2, medium: 5, low: 8 },
      { date: "2025-05-13", critical: 1, high: 2, medium: 5, low: 8 },
    ]
  };

  const handleScheduleScan = () => {
    // In a real implementation, this would schedule a security scan
    console.log("Scheduling security scan");
  };

  return (
    <div className="space-y-6 animate-fadeIn">
      {/* Summary Cards Row */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="bg-white shadow rounded-lg overflow-hidden">
          <div className="px-4 py-3 bg-red-50 flex justify-between items-center">
            <h3 className="text-sm font-medium text-red-800">Critical</h3>
            <ShieldOff className="h-5 w-5 text-red-800" />
          </div>
          <div className="px-4 py-5 text-center">
            <div className="text-3xl font-bold text-red-600">{data.summary.critical}</div>
            <div className="text-xs text-gray-500">vulnerabilities</div>
          </div>
        </div>
        
        <div className="bg-white shadow rounded-lg overflow-hidden">
          <div className="px-4 py-3 bg-orange-50 flex justify-between items-center">
            <h3 className="text-sm font-medium text-orange-800">High</h3>
            <ShieldOff className="h-5 w-5 text-orange-800" />
          </div>
          <div className="px-4 py-5 text-center">
            <div className="text-3xl font-bold text-orange-600">{data.summary.high}</div>
            <div className="text-xs text-gray-500">vulnerabilities</div>
          </div>
        </div>
        
        <div className="bg-white shadow rounded-lg overflow-hidden">
          <div className="px-4 py-3 bg-amber-50 flex justify-between items-center">
            <h3 className="text-sm font-medium text-amber-800">Medium</h3>
            <ShieldOff className="h-5 w-5 text-amber-800" />
          </div>
          <div className="px-4 py-5 text-center">
            <div className="text-3xl font-bold text-amber-600">{data.summary.medium}</div>
            <div className="text-xs text-gray-500">vulnerabilities</div>
          </div>
        </div>
        
        <div className="bg-white shadow rounded-lg overflow-hidden">
          <div className="px-4 py-3 bg-blue-50 flex justify-between items-center">
            <h3 className="text-sm font-medium text-blue-800">Low</h3>
            <ShieldOff className="h-5 w-5 text-blue-800" />
          </div>
          <div className="px-4 py-5 text-center">
            <div className="text-3xl font-bold text-blue-600">{data.summary.low}</div>
            <div className="text-xs text-gray-500">vulnerabilities</div>
          </div>
        </div>
      </div>
      
      {/* Vulnerability Status and Trend */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Status Card */}
        <div className="bg-white shadow rounded-lg overflow-hidden hover:shadow-md transition-shadow">
          <div className="px-6 py-5 border-b border-gray-200 flex justify-between items-center">
            <h3 className="text-lg font-medium text-gray-900">Vulnerability Status</h3>
          </div>
          <div className="p-6">
            <div className="flex items-center justify-center mb-8">
              <div className="relative h-40 w-40">
                <svg className="h-40 w-40" viewBox="0 0 100 100">
                  {/* Background circle */}
                  <circle
                    className="text-gray-200"
                    strokeWidth="10"
                    stroke="currentColor"
                    fill="transparent"
                    r="40"
                    cx="50"
                    cy="50"
                  />
                  {/* Resolved segment */}
                  <circle
                    className="text-green-500"
                    strokeWidth="10"
                    stroke="currentColor"
                    fill="transparent"
                    r="40"
                    cx="50"
                    cy="50"
                    strokeDasharray={`${(data.summary.resolved / data.summary.total) * 251.2} 251.2`}
                    strokeDashoffset="0"
                    transform="rotate(-90 50 50)"
                  />
                  {/* In Progress segment stacked on top */}
                  <circle
                    className="text-amber-500"
                    strokeWidth="10"
                    stroke="currentColor"
                    fill="transparent"
                    r="40"
                    cx="50"
                    cy="50"
                    strokeDasharray={`${(data.summary.inProgress / data.summary.total) * 251.2} 251.2`}
                    strokeDashoffset={`${-(data.summary.resolved / data.summary.total) * 251.2}`}
                    transform="rotate(-90 50 50)"
                  />
                </svg>
                <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center">
                  <div className="text-2xl font-bold text-gray-700">
                    {data.summary.open}
                  </div>
                  <div className="text-xs text-gray-500">open</div>
                </div>
              </div>
            </div>
            
            <div className="grid grid-cols-3 gap-4 text-center">
              <div>
                <div className="text-xl font-bold text-red-600">{data.summary.open}</div>
                <div className="text-xs text-gray-600">Open</div>
              </div>
              <div>
                <div className="text-xl font-bold text-amber-600">{data.summary.inProgress}</div>
                <div className="text-xs text-gray-600">In Progress</div>
              </div>
              <div>
                <div className="text-xl font-bold text-green-600">{data.summary.resolved}</div>
                <div className="text-xs text-gray-600">Resolved</div>
              </div>
            </div>
            
            <div className="mt-6 flex items-center justify-between">
              <div className="text-sm text-gray-500 flex items-center">
                <Clock className="h-4 w-4 mr-1" />
                Last scan: {new Date(data.lastScan).toLocaleDateString()}
              </div>
              <button 
                onClick={handleScheduleScan}
                className="px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium hover:bg-indigo-700 transition-colors flex items-center"
              >
                <Calendar className="h-4 w-4 mr-2" />
                Schedule Scan
              </button>
            </div>
          </div>
        </div>
        
        {/* Trend Card */}
        <div className="bg-white shadow rounded-lg overflow-hidden hover:shadow-md transition-shadow">
          <div className="px-6 py-5 border-b border-gray-200 flex justify-between items-center">
            <h3 className="text-lg font-medium text-gray-900">Vulnerability Trend</h3>
            <div className="flex space-x-2">
              <button 
                onClick={() => setTimeRange("7days")} 
                className={`px-2 py-1 text-xs rounded-md ${timeRange === "7days" ? "bg-indigo-100 text-indigo-800" : "bg-gray-100 text-gray-700"}`}
              >
                7d
              </button>
              <button 
                onClick={() => setTimeRange("30days")} 
                className={`px-2 py-1 text-xs rounded-md ${timeRange === "30days" ? "bg-indigo-100 text-indigo-800" : "bg-gray-100 text-gray-700"}`}
              >
                30d
              </button>
              <button 
                onClick={() => setTimeRange("90days")} 
                className={`px-2 py-1 text-xs rounded-md ${timeRange === "90days" ? "bg-indigo-100 text-indigo-800" : "bg-gray-100 text-gray-700"}`}
              >
                90d
              </button>
            </div>
          </div>
          <div className="p-6">
            <div className="h-64 flex flex-col">
              <div className="flex-1 flex items-end">
                {data.trendData.map((point, index) => (
                  <div key={index} className="flex-1 flex flex-col items-center">
                    <div className="w-full flex flex-col items-center space-y-1">
                      {/* Critical */}
                      {point.critical > 0 && (
                        <div 
                          className="w-8 bg-red-500" 
                          style={{ height: `${point.critical * 12}px` }}
                        ></div>
                      )}
                      {/* High */}
                      {point.high > 0 && (
                        <div 
                          className="w-8 bg-orange-500" 
                          style={{ height: `${point.high * 8}px` }}
                        ></div>
                      )}
                      {/* Medium */}
                      {point.medium > 0 && (
                        <div 
                          className="w-8 bg-amber-500" 
                          style={{ height: `${point.medium * 6}px` }}
                        ></div>
                      )}
                      {/* Low */}
                      {point.low > 0 && (
                        <div 
                          className="w-8 bg-blue-500" 
                          style={{ height: `${point.low * 4}px` }}
                        ></div>
                      )}
                    </div>
                    <div className="text-xs text-gray-500 mt-2">
                      {new Date(point.date).toLocaleDateString(undefined, {month: 'short', day: 'numeric'})}
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            <div className="mt-4">
              <div className="flex flex-wrap items-center justify-center gap-4">
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-red-500 mr-1"></div>
                  <span className="text-xs text-gray-600">Critical</span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-orange-500 mr-1"></div>
                  <span className="text-xs text-gray-600">High</span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-amber-500 mr-1"></div>
                  <span className="text-xs text-gray-600">Medium</span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-blue-500 mr-1"></div>
                  <span className="text-xs text-gray-600">Low</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Vulnerability List */}
      <div className="bg-white shadow rounded-lg overflow-hidden hover:shadow-md transition-shadow">
        <div className="px-6 py-5 border-b border-gray-200 flex flex-wrap items-center justify-between gap-4">
          <h3 className="text-lg font-medium text-gray-900">Active Vulnerabilities</h3>
          
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-4 w-4 text-gray-400" />
            </div>
            <input
              type="text"
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white 
                      placeholder-gray-500 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              placeholder="Search vulnerabilities"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
        
        {filteredVulnerabilities.length > 0 ? (
          <div className="flex flex-col md:flex-row">
            {/* Vulnerability List */}
            <div className={`${selectedVulnerability ? "hidden md:block md:w-1/2" : "w-full"} border-r border-gray-200`}>
              <ul className="divide-y divide-gray-200 max-h-[calc(100vh-350px)] overflow-y-auto">
                {filteredVulnerabilities.map((vuln) => (
                  <li 
                    key={vuln.id} 
                    onClick={() => setSelectedVulnerability(vuln)}
                    className={`px-6 py-4 cursor-pointer hover:bg-gray-50 transition-colors ${
                      selectedVulnerability && selectedVulnerability.id === vuln.id ? "bg-indigo-50" : ""
                    }`}
                  >
                    <div className="flex items-start">
                      <div className="flex-shrink-0 pt-0.5">
                        <span 
                          className={`inline-flex items-center justify-center h-8 w-8 rounded-full ${getSeverityBgColor(vuln.severity)}`}
                        >
                          <ShieldOff className={`h-5 w-5 ${getSeverityColor(vuln.severity)}`} />
                        </span>
                      </div>
                      <div className="ml-3 flex-1">
                        <div className="flex items-center justify-between">
                          <p className="text-sm font-medium text-gray-900">{vuln.title}</p>
                          <span className={`px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityBgColor(vuln.severity)} ${getSeverityColor(vuln.severity)}`}>
                            {vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)}
                          </span>
                        </div>
                        <p className="mt-1 text-sm text-gray-500 line-clamp-2">
                          {vuln.description}
                        </p>
                        <div className="mt-2 flex items-center justify-between">
                          <div className="text-xs text-gray-500">
                            Found in: {vuln.affected}
                          </div>
                          <div className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusBadge(vuln.status)}`}>
                            {vuln.status.charAt(0).toUpperCase() + vuln.status.slice(1)}
                          </div>
                        </div>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
            
            {/* Vulnerability Details */}
            {selectedVulnerability ? (
              <div className="md:w-1/2 p-6 animate-fadeIn">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-center">
                    <span 
                      className={`inline-flex items-center justify-center h-10 w-10 rounded-full mr-3 ${getSeverityBgColor(selectedVulnerability.severity)}`}
                    >
                      <ShieldOff className={`h-6 w-6 ${getSeverityColor(selectedVulnerability.severity)}`} />
                    </span>
                    <div>
                      <h2 className="text-lg font-semibold text-gray-900">{selectedVulnerability.title}</h2>
                      <div className="flex items-center mt-1 flex-wrap gap-2">
                        <span className={`px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityBgColor(selectedVulnerability.severity)} ${getSeverityColor(selectedVulnerability.severity)}`}>
                          {selectedVulnerability.severity.charAt(0).toUpperCase() + selectedVulnerability.severity.slice(1)}
                        </span>
                        <span className={`px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(selectedVulnerability.status)}`}>
                          {selectedVulnerability.status.charAt(0).toUpperCase() + selectedVulnerability.status.slice(1)}
                        </span>
                        <span className="text-sm text-gray-500">
                          CVSS: {selectedVulnerability.cvss}
                        </span>
                      </div>
                    </div>
                  </div>
                  <button 
                    onClick={() => setSelectedVulnerability(null)}
                    className="rounded-full p-1 hover:bg-gray-100 transition-colors md:hidden"
                  >
                    <X className="h-5 w-5 text-gray-500" />
                  </button>
                </div>

                <div className="mt-6 space-y-6">
                  <div>
                    <h3 className="text-sm font-medium text-gray-700">Description</h3>
                    <p className="mt-2 text-sm text-gray-600">{selectedVulnerability.description}</p>
                  </div>

                  <div>
                    <h3 className="text-sm font-medium text-gray-700">Affected System</h3>
                    <p className="mt-2 text-sm text-gray-600">{selectedVulnerability.affected}</p>
                  </div>

                  <div>
                    <h3 className="text-sm font-medium text-gray-700">Remediation</h3>
                    <p className="mt-2 text-sm text-gray-600">{selectedVulnerability.remediation}</p>
                  </div>

                  <div>
                    <h3 className="text-sm font-medium text-gray-700">References</h3>
                    <ul className="mt-2 text-sm space-y-1">
                      {selectedVulnerability.references.map((ref, index) => (
                        <li key={index} className="flex items-center">
                          <ArrowUpRight className="h-3 w-3 text-indigo-500 mr-1 flex-shrink-0" />
                          <span className="text-indigo-600 hover:text-indigo-800 cursor-pointer">
                            {ref}
                          </span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>

                <div className="mt-8 flex justify-end space-x-3">
                  {selectedVulnerability.status !== "resolved" && (
                    <>
                      <button 
                        className="px-4 py-2 bg-gray-100 text-gray-700 rounded-md text-sm font-medium hover:bg-gray-200 transition-colors"
                      >
                        Assign to Team
                      </button>
                      <button 
                        className="px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium hover:bg-indigo-700 transition-colors"
                      >
                        Mark as Resolved
                      </button>
                    </>
                  )}
                  {selectedVulnerability.status === "resolved" && (
                    <div className="px-4 py-2 bg-green-100 text-green-800 rounded-md text-sm font-medium flex items-center">
                      <CheckCircle className="h-4 w-4 mr-2" /> 
                      Vulnerability Resolved
                    </div>
                  )}
                </div>
              </div>
            ) : (
              <div className="hidden md:flex md:w-1/2 items-center justify-center p-6">
                <div className="text-center">
                  <ShieldOff className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900">No Vulnerability Selected</h3>
                  <p className="mt-1 text-sm text-gray-500">Select a vulnerability from the list to view details</p>
                </div>
              </div>
            )}
          </div>
        ) : (
          <EmptyState
            icon={<ShieldOff className="h-12 w-12 text-gray-400" />}
            title="No vulnerabilities found"
            message="There are no vulnerabilities matching your search criteria."
          />
        )}
      </div>
    </div>
  );
};

export default VulnerabilityMetrics;